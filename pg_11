#include <stdio.h>
#define MAX_CITIES 20

int adjMatrix[MAX_CITIES][MAX_CITIES];
int visited[MAX_CITIES];
int n;

void createGraph() {
    int i, j;
    printf("Enter the number of cities: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            adjMatrix[i][j] = 0;

    printf("Enter the adjacency matrix (1 for edge, 0 for no edge):\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &adjMatrix[i][j]);
}

void bfs(int start) {
    int queue[MAX_CITIES], front = -1, rear = -1, i;

    for (i = 0; i < n; i++)
        visited[i] = 0;

    visited[start] = 1;
    queue[++rear] = start;

    printf("BFS starting from city %d: ", start + 1);
    while (front != rear) {
        int current = queue[++front];
        printf("%d ", current + 1);

        for (i = 0; i < n; i++) {
            if (adjMatrix[current][i] == 1 && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
            }
        }
    }
    printf("\n");
}

void dfs(int start) {
    int stack[MAX_CITIES], top = -1, i;

    for (i = 0; i < n; i++)
        visited[i] = 0;

    visited[start] = 1;
    stack[++top] = start;

    printf("DFS starting from city %d: ", start + 1);
    while (top != -1) {
        int current = stack[top--];
        printf("%d ", current + 1);

        for (i = 0; i < n; i++) {
            if (adjMatrix[current][i] == 1 && !visited[i]) {
                visited[i] = 1;
                stack[++top] = i;
            }
        }
    }
    printf("\n");
}

int main() {
    int choice, startCity;
    do {
        printf("\nMenu:\n");
        printf("1. Create Graph\n");
        printf("2. BFS Traversal\n");
        printf("3. DFS Traversal\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                createGraph();
                break;
            case 2:
                printf("Enter the starting city for BFS (1 to %d): ", n);
                scanf("%d", &startCity);
                startCity--;
                if (startCity >= 0 && startCity < n)
                    bfs(startCity);
                else
                    printf("Invalid city number.\n");
                break;
            case 3:
                printf("Enter the starting city for DFS (1 to %d): ", n);
                scanf("%d", &startCity);
                startCity--;
                if (startCity >= 0 && startCity < n)
                    dfs(startCity);
                else
                    printf("Invalid city number.\n");
                break;
            case 4:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    } while (choice != 4);

    return 0;
}
